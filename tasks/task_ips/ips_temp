# no delete needed just upsert
def DONTUSE_write_python_statistics_in_db():
    print('writing statistics for private ips using python\'s private networks...')
    connector = DBConnector()
    ip_finder = PrivateIPFinder()
    net_stat_python = ip_finder.private_ip_statistics_using_python_networks(connector)
    # delete statistics collection
    bulk = connector.db.python_privates.initialize_ordered_bulk_op()
    bulk.find({}).remove()
    bulk.execute()
    # insert
    bulk = connector.db.python_privates.initialize_ordered_bulk_op()
    for net in net_stat_python:
        bulk.insert({
            'network':str(net.network),
            'ip_int_min':net.ip_int_min,
            'ip_int_max':net.ip_int_max,
            'times_met':net.times_met
            })
    bulk.execute()
    print('done writing')

# no delete needed just upsert
def DONTUSE_write_wiki_statistics_in_db():
    print('writing statistics for private ips using wiki\'s private networks...')
    connector = DBConnector()
    ip_finder = PrivateIPFinder()
    net_stat_wiki = ip_finder.private_ip_statistics_using_wiki_networks(connector)
    # delete statistics collection
    bulk = connector.db.wiki_privates.initialize_ordered_bulk_op()
    bulk.find({}).remove()
    bulk.execute()
    # insert
    bulk = connector.db.wiki_privates.initialize_ordered_bulk_op()
    for net in net_stat_wiki:
        bulk.insert({
            'network':str(net.network),
            'ip_int_min':net.ip_int_min,
            'ip_int_max':net.ip_int_max,
            'times_met':net.times_met
            })
    bulk.execute()
    print('done writing')